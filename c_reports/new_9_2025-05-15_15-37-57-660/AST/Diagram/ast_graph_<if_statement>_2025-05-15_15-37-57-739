// AST
digraph {
	rankdir=TB
	139211123405696 [label="root: <if_statement>"]
	139211123405056 [label="rule: <if_statement>"]
	139211123405696 -> 139211123405056
	139211123405760 [label="terminal: if"]
	139211123405056 -> 139211123405760
	139211123402432 [label="terminal: ("]
	139211123405056 -> 139211123402432
	139211123405824 [label="rule: <boolean_literal>"]
	139211123405056 -> 139211123405824
	139211123405952 [label="terminal: true"]
	139211123405824 -> 139211123405952
	139211123406080 [label="terminal: )"]
	139211123405056 -> 139211123406080
	139211123406144 [label="terminal: {"]
	139211123405056 -> 139211123406144
	139211123406208 [label="rule: <statement>"]
	139211123405056 -> 139211123406208
	139211123406272 [label="rule: <while_loop>"]
	139211123406208 -> 139211123406272
	139211123406336 [label="terminal: while"]
	139211123406272 -> 139211123406336
	139211123406464 [label="terminal: ("]
	139211123406272 -> 139211123406464
	139211123406528 [label="rule: <boolean_literal>"]
	139211123406272 -> 139211123406528
	139211123406592 [label="terminal: true"]
	139211123406528 -> 139211123406592
	139211123406720 [label="terminal: )"]
	139211123406272 -> 139211123406720
	139211123406784 [label="terminal: {"]
	139211123406272 -> 139211123406784
	139211123406848 [label="rule: <while_loop_body>"]
	139211123406272 -> 139211123406848
	139211123406912 [label="rule: <print_statement>"]
	139211123406848 -> 139211123406912
	139211123406976 [label="terminal: printf("]
	139211123406912 -> 139211123406976
	139211123407104 [label="rule: <message>"]
	139211123406912 -> 139211123407104
	139211123407168 [label="terminal: \"This is a sample print statement\""]
	139211123407104 -> 139211123407168
	139211123407296 [label="terminal: );"]
	139211123406912 -> 139211123407296
	139211123407424 [label="terminal: }"]
	139211123406272 -> 139211123407424
	139211123407488 [label="terminal: }"]
	139211123405056 -> 139211123407488
	139211123405888 [label="terminal: else"]
	139211123405056 -> 139211123405888
	139211123407552 [label="terminal: {"]
	139211123405056 -> 139211123407552
	139211123407616 [label="rule: <statement>"]
	139211123405056 -> 139211123407616
	139211123407680 [label="rule: <for_loop>"]
	139211123407616 -> 139211123407680
	139211123407744 [label="terminal: for"]
	139211123407680 -> 139211123407744
	139211123407872 [label="terminal: ("]
	139211123407680 -> 139211123407872
	139211123407936 [label="rule: <for_loop_initialization>"]
	139211123407680 -> 139211123407936
	139211123408000 [label="rule: <for_loop_data_type>"]
	139211123407936 -> 139211123408000
	139211123408064 [label="terminal: int"]
	139211123408000 -> 139211123408064
	139211123408256 [label="rule: <for_loop_identifier>"]
	139211123407936 -> 139211123408256
	139211123408320 [label="terminal: i"]
	139211123408256 -> 139211123408320
	139211123408448 [label="terminal: ="]
	139211123407936 -> 139211123408448
	139211123408512 [label="rule: <for_loop_value>"]
	139211123407936 -> 139211123408512
	139211123408576 [label="terminal: 0"]
	139211123408512 -> 139211123408576
	139211123408704 [label="terminal: ;"]
	139211123407936 -> 139211123408704
	139211123408768 [label="rule: <for_loop_condition>"]
	139211123407680 -> 139211123408768
	139211123408832 [label="rule: <for_loop_condition_less_than>"]
	139211123408768 -> 139211123408832
	139211123408960 [label="terminal: i<"]
	139211123408832 -> 139211123408960
	139211123409088 [label="rule: <for_loop_value>"]
	139211123408832 -> 139211123409088
	139211123409152 [label="terminal: 0"]
	139211123409088 -> 139211123409152
	139211123409280 [label="terminal: ;"]
	139211123408832 -> 139211123409280
	139211123409408 [label="rule: <for_loop_update>"]
	139211123407680 -> 139211123409408
	139211123409472 [label="rule: <for_loop_identifier>"]
	139211123409408 -> 139211123409472
	139211123409536 [label="terminal: i"]
	139211123409472 -> 139211123409536
	139211123409728 [label="terminal: ++"]
	139211123409408 -> 139211123409728
	139211123409792 [label="terminal: ){"]
	139211123407680 -> 139211123409792
	139211123409856 [label="rule: <for_loop_body>"]
	139211123407680 -> 139211123409856
	139211123409920 [label="rule: <math_expression>"]
	139211123409856 -> 139211123409920
	139211123409984 [label="rule: <math_data_type>"]
	139211123409920 -> 139211123409984
	139211123410048 [label="terminal: int"]
	139211123409984 -> 139211123410048
	139211123410240 [label="rule: <identifier>"]
	139211123409920 -> 139211123410240
	139211123410304 [label="terminal: alphaTau"]
	139211123410240 -> 139211123410304
	139211123410432 [label="terminal: ="]
	139211123409920 -> 139211123410432
	139211123410496 [label="rule: <math_number>"]
	139211123409920 -> 139211123410496
	139211123410560 [label="terminal: 10"]
	139211123410496 -> 139211123410560
	139211123410688 [label="rule: <math_operation>"]
	139211123409920 -> 139211123410688
	139211123410752 [label="terminal: *"]
	139211123410688 -> 139211123410752
	139211123410880 [label="rule: <math_number>"]
	139211123409920 -> 139211123410880
	139211123410944 [label="terminal: 12"]
	139211123410880 -> 139211123410944
	139211123411072 [label="terminal: ;"]
	139211123409920 -> 139211123411072
	139211123407808 [label="terminal: }"]
	139211123407680 -> 139211123407808
	139211123411200 [label="terminal: }"]
	139211123405056 -> 139211123411200
}
